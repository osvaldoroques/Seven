// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace Trevor {
class HealthCheckRequest;
class HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
class HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class MarketDataUpdate;
class MarketDataUpdateDefaultTypeInternal;
extern MarketDataUpdateDefaultTypeInternal _MarketDataUpdate_default_instance_;
class PortfolioRequest;
class PortfolioRequestDefaultTypeInternal;
extern PortfolioRequestDefaultTypeInternal _PortfolioRequest_default_instance_;
class PortfolioResponse;
class PortfolioResponseDefaultTypeInternal;
extern PortfolioResponseDefaultTypeInternal _PortfolioResponse_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class TradeRequest;
class TradeRequestDefaultTypeInternal;
extern TradeRequestDefaultTypeInternal _TradeRequest_default_instance_;
class TradeResponse;
class TradeResponseDefaultTypeInternal;
extern TradeResponseDefaultTypeInternal _TradeResponse_default_instance_;
}  // namespace Trevor
PROTOBUF_NAMESPACE_OPEN
template<> ::Trevor::HealthCheckRequest* Arena::CreateMaybeMessage<::Trevor::HealthCheckRequest>(Arena*);
template<> ::Trevor::HealthCheckResponse* Arena::CreateMaybeMessage<::Trevor::HealthCheckResponse>(Arena*);
template<> ::Trevor::MarketDataUpdate* Arena::CreateMaybeMessage<::Trevor::MarketDataUpdate>(Arena*);
template<> ::Trevor::PortfolioRequest* Arena::CreateMaybeMessage<::Trevor::PortfolioRequest>(Arena*);
template<> ::Trevor::PortfolioResponse* Arena::CreateMaybeMessage<::Trevor::PortfolioResponse>(Arena*);
template<> ::Trevor::Position* Arena::CreateMaybeMessage<::Trevor::Position>(Arena*);
template<> ::Trevor::TradeRequest* Arena::CreateMaybeMessage<::Trevor::TradeRequest>(Arena*);
template<> ::Trevor::TradeResponse* Arena::CreateMaybeMessage<::Trevor::TradeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Trevor {

// ===================================================================

class HealthCheckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trevor.HealthCheckRequest) */ {
 public:
  inline HealthCheckRequest() : HealthCheckRequest(nullptr) {};
  virtual ~HealthCheckRequest();

  HealthCheckRequest(const HealthCheckRequest& from);
  HealthCheckRequest(HealthCheckRequest&& from) noexcept
    : HealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthCheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
               &_HealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckRequest* New() const final {
    return CreateMaybeMessage<HealthCheckRequest>(nullptr);
  }

  HealthCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthCheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthCheckRequest& from);
  void MergeFrom(const HealthCheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trevor.HealthCheckRequest";
  }
  protected:
  explicit HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string uid = 2;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // @@protoc_insertion_point(class_scope:Trevor.HealthCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trevor.HealthCheckResponse) */ {
 public:
  inline HealthCheckResponse() : HealthCheckResponse(nullptr) {};
  virtual ~HealthCheckResponse();

  HealthCheckResponse(const HealthCheckResponse& from);
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthCheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckResponse* New() const final {
    return CreateMaybeMessage<HealthCheckResponse>(nullptr);
  }

  HealthCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthCheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthCheckResponse& from);
  void MergeFrom(const HealthCheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trevor.HealthCheckResponse";
  }
  protected:
  explicit HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kUidFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string uid = 2;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string status = 3;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:Trevor.HealthCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PortfolioRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trevor.PortfolioRequest) */ {
 public:
  inline PortfolioRequest() : PortfolioRequest(nullptr) {};
  virtual ~PortfolioRequest();

  PortfolioRequest(const PortfolioRequest& from);
  PortfolioRequest(PortfolioRequest&& from) noexcept
    : PortfolioRequest() {
    *this = ::std::move(from);
  }

  inline PortfolioRequest& operator=(const PortfolioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioRequest& operator=(PortfolioRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortfolioRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortfolioRequest* internal_default_instance() {
    return reinterpret_cast<const PortfolioRequest*>(
               &_PortfolioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PortfolioRequest& a, PortfolioRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortfolioRequest* New() const final {
    return CreateMaybeMessage<PortfolioRequest>(nullptr);
  }

  PortfolioRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortfolioRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortfolioRequest& from);
  void MergeFrom(const PortfolioRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trevor.PortfolioRequest";
  }
  protected:
  explicit PortfolioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolsFieldNumber = 3,
    kAccountIdFieldNumber = 1,
    kRequesterUidFieldNumber = 2,
  };
  // repeated string symbols = 3;
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;
  public:
  void clear_symbols();
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  void set_symbols(int index, const std::string& value);
  void set_symbols(int index, std::string&& value);
  void set_symbols(int index, const char* value);
  void set_symbols(int index, const char* value, size_t size);
  std::string* add_symbols();
  void add_symbols(const std::string& value);
  void add_symbols(std::string&& value);
  void add_symbols(const char* value);
  void add_symbols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_symbols();
  private:
  const std::string& _internal_symbols(int index) const;
  std::string* _internal_add_symbols();
  public:

  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_id(
      std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string requester_uid = 2;
  void clear_requester_uid();
  const std::string& requester_uid() const;
  void set_requester_uid(const std::string& value);
  void set_requester_uid(std::string&& value);
  void set_requester_uid(const char* value);
  void set_requester_uid(const char* value, size_t size);
  std::string* mutable_requester_uid();
  std::string* release_requester_uid();
  void set_allocated_requester_uid(std::string* requester_uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_requester_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_requester_uid(
      std::string* requester_uid);
  private:
  const std::string& _internal_requester_uid() const;
  void _internal_set_requester_uid(const std::string& value);
  std::string* _internal_mutable_requester_uid();
  public:

  // @@protoc_insertion_point(class_scope:Trevor.PortfolioRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> symbols_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PortfolioResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trevor.PortfolioResponse) */ {
 public:
  inline PortfolioResponse() : PortfolioResponse(nullptr) {};
  virtual ~PortfolioResponse();

  PortfolioResponse(const PortfolioResponse& from);
  PortfolioResponse(PortfolioResponse&& from) noexcept
    : PortfolioResponse() {
    *this = ::std::move(from);
  }

  inline PortfolioResponse& operator=(const PortfolioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioResponse& operator=(PortfolioResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortfolioResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortfolioResponse* internal_default_instance() {
    return reinterpret_cast<const PortfolioResponse*>(
               &_PortfolioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PortfolioResponse& a, PortfolioResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortfolioResponse* New() const final {
    return CreateMaybeMessage<PortfolioResponse>(nullptr);
  }

  PortfolioResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortfolioResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortfolioResponse& from);
  void MergeFrom(const PortfolioResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trevor.PortfolioResponse";
  }
  protected:
  explicit PortfolioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 5,
    kAccountIdFieldNumber = 1,
    kStatusFieldNumber = 4,
    kTotalValueFieldNumber = 2,
    kCashBalanceFieldNumber = 3,
  };
  // repeated .Trevor.Position positions = 5;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::Trevor::Position* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trevor::Position >*
      mutable_positions();
  private:
  const ::Trevor::Position& _internal_positions(int index) const;
  ::Trevor::Position* _internal_add_positions();
  public:
  const ::Trevor::Position& positions(int index) const;
  ::Trevor::Position* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trevor::Position >&
      positions() const;

  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_id(
      std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string status = 4;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // double total_value = 2;
  void clear_total_value();
  double total_value() const;
  void set_total_value(double value);
  private:
  double _internal_total_value() const;
  void _internal_set_total_value(double value);
  public:

  // double cash_balance = 3;
  void clear_cash_balance();
  double cash_balance() const;
  void set_cash_balance(double value);
  private:
  double _internal_cash_balance() const;
  void _internal_set_cash_balance(double value);
  public:

  // @@protoc_insertion_point(class_scope:Trevor.PortfolioResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trevor::Position > positions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  double total_value_;
  double cash_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trevor.Position) */ {
 public:
  inline Position() : Position(nullptr) {};
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trevor.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kAverageCostFieldNumber = 3,
    kCurrentPriceFieldNumber = 4,
    kMarketValueFieldNumber = 5,
    kUnrealizedPnlFieldNumber = 6,
  };
  // string symbol = 1;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_symbol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_symbol(
      std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // double quantity = 2;
  void clear_quantity();
  double quantity() const;
  void set_quantity(double value);
  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);
  public:

  // double average_cost = 3;
  void clear_average_cost();
  double average_cost() const;
  void set_average_cost(double value);
  private:
  double _internal_average_cost() const;
  void _internal_set_average_cost(double value);
  public:

  // double current_price = 4;
  void clear_current_price();
  double current_price() const;
  void set_current_price(double value);
  private:
  double _internal_current_price() const;
  void _internal_set_current_price(double value);
  public:

  // double market_value = 5;
  void clear_market_value();
  double market_value() const;
  void set_market_value(double value);
  private:
  double _internal_market_value() const;
  void _internal_set_market_value(double value);
  public:

  // double unrealized_pnl = 6;
  void clear_unrealized_pnl();
  double unrealized_pnl() const;
  void set_unrealized_pnl(double value);
  private:
  double _internal_unrealized_pnl() const;
  void _internal_set_unrealized_pnl(double value);
  public:

  // @@protoc_insertion_point(class_scope:Trevor.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  double quantity_;
  double average_cost_;
  double current_price_;
  double market_value_;
  double unrealized_pnl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MarketDataUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trevor.MarketDataUpdate) */ {
 public:
  inline MarketDataUpdate() : MarketDataUpdate(nullptr) {};
  virtual ~MarketDataUpdate();

  MarketDataUpdate(const MarketDataUpdate& from);
  MarketDataUpdate(MarketDataUpdate&& from) noexcept
    : MarketDataUpdate() {
    *this = ::std::move(from);
  }

  inline MarketDataUpdate& operator=(const MarketDataUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataUpdate& operator=(MarketDataUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDataUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDataUpdate* internal_default_instance() {
    return reinterpret_cast<const MarketDataUpdate*>(
               &_MarketDataUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MarketDataUpdate& a, MarketDataUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDataUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDataUpdate* New() const final {
    return CreateMaybeMessage<MarketDataUpdate>(nullptr);
  }

  MarketDataUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDataUpdate& from);
  void MergeFrom(const MarketDataUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trevor.MarketDataUpdate";
  }
  protected:
  explicit MarketDataUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kExchangeFieldNumber = 5,
    kPriceFieldNumber = 2,
    kVolumeFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string symbol = 1;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_symbol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_symbol(
      std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string exchange = 5;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange(
      std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // double price = 2;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int64 volume = 3;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Trevor.MarketDataUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TradeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trevor.TradeRequest) */ {
 public:
  inline TradeRequest() : TradeRequest(nullptr) {};
  virtual ~TradeRequest();

  TradeRequest(const TradeRequest& from);
  TradeRequest(TradeRequest&& from) noexcept
    : TradeRequest() {
    *this = ::std::move(from);
  }

  inline TradeRequest& operator=(const TradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeRequest& operator=(TradeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeRequest* internal_default_instance() {
    return reinterpret_cast<const TradeRequest*>(
               &_TradeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TradeRequest& a, TradeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeRequest* New() const final {
    return CreateMaybeMessage<TradeRequest>(nullptr);
  }

  TradeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeRequest& from);
  void MergeFrom(const TradeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trevor.TradeRequest";
  }
  protected:
  explicit TradeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kSideFieldNumber = 3,
    kOrderTypeFieldNumber = 5,
    kRequesterUidFieldNumber = 7,
    kQuantityFieldNumber = 4,
    kPriceFieldNumber = 6,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_id(
      std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_symbol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_symbol(
      std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string side = 3;
  void clear_side();
  const std::string& side() const;
  void set_side(const std::string& value);
  void set_side(std::string&& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  std::string* mutable_side();
  std::string* release_side();
  void set_allocated_side(std::string* side);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_side();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_side(
      std::string* side);
  private:
  const std::string& _internal_side() const;
  void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // string order_type = 5;
  void clear_order_type();
  const std::string& order_type() const;
  void set_order_type(const std::string& value);
  void set_order_type(std::string&& value);
  void set_order_type(const char* value);
  void set_order_type(const char* value, size_t size);
  std::string* mutable_order_type();
  std::string* release_order_type();
  void set_allocated_order_type(std::string* order_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_order_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_order_type(
      std::string* order_type);
  private:
  const std::string& _internal_order_type() const;
  void _internal_set_order_type(const std::string& value);
  std::string* _internal_mutable_order_type();
  public:

  // string requester_uid = 7;
  void clear_requester_uid();
  const std::string& requester_uid() const;
  void set_requester_uid(const std::string& value);
  void set_requester_uid(std::string&& value);
  void set_requester_uid(const char* value);
  void set_requester_uid(const char* value, size_t size);
  std::string* mutable_requester_uid();
  std::string* release_requester_uid();
  void set_allocated_requester_uid(std::string* requester_uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_requester_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_requester_uid(
      std::string* requester_uid);
  private:
  const std::string& _internal_requester_uid() const;
  void _internal_set_requester_uid(const std::string& value);
  std::string* _internal_mutable_requester_uid();
  public:

  // double quantity = 4;
  void clear_quantity();
  double quantity() const;
  void set_quantity(double value);
  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);
  public:

  // double price = 6;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:Trevor.TradeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_uid_;
  double quantity_;
  double price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TradeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trevor.TradeResponse) */ {
 public:
  inline TradeResponse() : TradeResponse(nullptr) {};
  virtual ~TradeResponse();

  TradeResponse(const TradeResponse& from);
  TradeResponse(TradeResponse&& from) noexcept
    : TradeResponse() {
    *this = ::std::move(from);
  }

  inline TradeResponse& operator=(const TradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeResponse& operator=(TradeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeResponse* internal_default_instance() {
    return reinterpret_cast<const TradeResponse*>(
               &_TradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TradeResponse& a, TradeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeResponse* New() const final {
    return CreateMaybeMessage<TradeResponse>(nullptr);
  }

  TradeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeResponse& from);
  void MergeFrom(const TradeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trevor.TradeResponse";
  }
  protected:
  explicit TradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kReasonFieldNumber = 6,
    kFilledQuantityFieldNumber = 4,
    kAverageFillPriceFieldNumber = 5,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_id(
      std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string order_id = 2;
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_order_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_order_id(
      std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string status = 3;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string reason = 6;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reason(
      std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // double filled_quantity = 4;
  void clear_filled_quantity();
  double filled_quantity() const;
  void set_filled_quantity(double value);
  private:
  double _internal_filled_quantity() const;
  void _internal_set_filled_quantity(double value);
  public:

  // double average_fill_price = 5;
  void clear_average_fill_price();
  double average_fill_price() const;
  void set_average_fill_price(double value);
  private:
  double _internal_average_fill_price() const;
  void _internal_set_average_fill_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:Trevor.TradeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  double filled_quantity_;
  double average_fill_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HealthCheckRequest

// string service_name = 1;
inline void HealthCheckRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthCheckRequest::service_name() const {
  // @@protoc_insertion_point(field_get:Trevor.HealthCheckRequest.service_name)
  return _internal_service_name();
}
inline void HealthCheckRequest::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:Trevor.HealthCheckRequest.service_name)
}
inline std::string* HealthCheckRequest::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:Trevor.HealthCheckRequest.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& HealthCheckRequest::_internal_service_name() const {
  return service_name_.Get();
}
inline void HealthCheckRequest::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthCheckRequest::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.HealthCheckRequest.service_name)
}
inline void HealthCheckRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.HealthCheckRequest.service_name)
}
inline void HealthCheckRequest::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.HealthCheckRequest.service_name)
}
inline std::string* HealthCheckRequest::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthCheckRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:Trevor.HealthCheckRequest.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthCheckRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.HealthCheckRequest.service_name)
}
inline std::string* HealthCheckRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.HealthCheckRequest.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthCheckRequest::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.HealthCheckRequest.service_name)
}

// string uid = 2;
inline void HealthCheckRequest::clear_uid() {
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthCheckRequest::uid() const {
  // @@protoc_insertion_point(field_get:Trevor.HealthCheckRequest.uid)
  return _internal_uid();
}
inline void HealthCheckRequest::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Trevor.HealthCheckRequest.uid)
}
inline std::string* HealthCheckRequest::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:Trevor.HealthCheckRequest.uid)
  return _internal_mutable_uid();
}
inline const std::string& HealthCheckRequest::_internal_uid() const {
  return uid_.Get();
}
inline void HealthCheckRequest::_internal_set_uid(const std::string& value) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthCheckRequest::set_uid(std::string&& value) {
  
  uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.HealthCheckRequest.uid)
}
inline void HealthCheckRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.HealthCheckRequest.uid)
}
inline void HealthCheckRequest::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.HealthCheckRequest.uid)
}
inline std::string* HealthCheckRequest::_internal_mutable_uid() {
  
  return uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthCheckRequest::release_uid() {
  // @@protoc_insertion_point(field_release:Trevor.HealthCheckRequest.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthCheckRequest::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.HealthCheckRequest.uid)
}
inline std::string* HealthCheckRequest::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.HealthCheckRequest.uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthCheckRequest::unsafe_arena_set_allocated_uid(
    std::string* uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.HealthCheckRequest.uid)
}

// -------------------------------------------------------------------

// HealthCheckResponse

// string service_name = 1;
inline void HealthCheckResponse::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthCheckResponse::service_name() const {
  // @@protoc_insertion_point(field_get:Trevor.HealthCheckResponse.service_name)
  return _internal_service_name();
}
inline void HealthCheckResponse::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:Trevor.HealthCheckResponse.service_name)
}
inline std::string* HealthCheckResponse::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:Trevor.HealthCheckResponse.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& HealthCheckResponse::_internal_service_name() const {
  return service_name_.Get();
}
inline void HealthCheckResponse::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthCheckResponse::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.HealthCheckResponse.service_name)
}
inline void HealthCheckResponse::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.HealthCheckResponse.service_name)
}
inline void HealthCheckResponse::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.HealthCheckResponse.service_name)
}
inline std::string* HealthCheckResponse::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthCheckResponse::release_service_name() {
  // @@protoc_insertion_point(field_release:Trevor.HealthCheckResponse.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthCheckResponse::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.HealthCheckResponse.service_name)
}
inline std::string* HealthCheckResponse::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.HealthCheckResponse.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthCheckResponse::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.HealthCheckResponse.service_name)
}

// string uid = 2;
inline void HealthCheckResponse::clear_uid() {
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthCheckResponse::uid() const {
  // @@protoc_insertion_point(field_get:Trevor.HealthCheckResponse.uid)
  return _internal_uid();
}
inline void HealthCheckResponse::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Trevor.HealthCheckResponse.uid)
}
inline std::string* HealthCheckResponse::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:Trevor.HealthCheckResponse.uid)
  return _internal_mutable_uid();
}
inline const std::string& HealthCheckResponse::_internal_uid() const {
  return uid_.Get();
}
inline void HealthCheckResponse::_internal_set_uid(const std::string& value) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthCheckResponse::set_uid(std::string&& value) {
  
  uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.HealthCheckResponse.uid)
}
inline void HealthCheckResponse::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.HealthCheckResponse.uid)
}
inline void HealthCheckResponse::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.HealthCheckResponse.uid)
}
inline std::string* HealthCheckResponse::_internal_mutable_uid() {
  
  return uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthCheckResponse::release_uid() {
  // @@protoc_insertion_point(field_release:Trevor.HealthCheckResponse.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthCheckResponse::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.HealthCheckResponse.uid)
}
inline std::string* HealthCheckResponse::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.HealthCheckResponse.uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthCheckResponse::unsafe_arena_set_allocated_uid(
    std::string* uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.HealthCheckResponse.uid)
}

// string status = 3;
inline void HealthCheckResponse::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:Trevor.HealthCheckResponse.status)
  return _internal_status();
}
inline void HealthCheckResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Trevor.HealthCheckResponse.status)
}
inline std::string* HealthCheckResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:Trevor.HealthCheckResponse.status)
  return _internal_mutable_status();
}
inline const std::string& HealthCheckResponse::_internal_status() const {
  return status_.Get();
}
inline void HealthCheckResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthCheckResponse::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.HealthCheckResponse.status)
}
inline void HealthCheckResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.HealthCheckResponse.status)
}
inline void HealthCheckResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.HealthCheckResponse.status)
}
inline std::string* HealthCheckResponse::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthCheckResponse::release_status() {
  // @@protoc_insertion_point(field_release:Trevor.HealthCheckResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthCheckResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.HealthCheckResponse.status)
}
inline std::string* HealthCheckResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.HealthCheckResponse.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthCheckResponse::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.HealthCheckResponse.status)
}

// -------------------------------------------------------------------

// PortfolioRequest

// string account_id = 1;
inline void PortfolioRequest::clear_account_id() {
  account_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioRequest::account_id() const {
  // @@protoc_insertion_point(field_get:Trevor.PortfolioRequest.account_id)
  return _internal_account_id();
}
inline void PortfolioRequest::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:Trevor.PortfolioRequest.account_id)
}
inline std::string* PortfolioRequest::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:Trevor.PortfolioRequest.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& PortfolioRequest::_internal_account_id() const {
  return account_id_.Get();
}
inline void PortfolioRequest::_internal_set_account_id(const std::string& value) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioRequest::set_account_id(std::string&& value) {
  
  account_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.PortfolioRequest.account_id)
}
inline void PortfolioRequest::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.PortfolioRequest.account_id)
}
inline void PortfolioRequest::set_account_id(const char* value,
    size_t size) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.PortfolioRequest.account_id)
}
inline std::string* PortfolioRequest::_internal_mutable_account_id() {
  
  return account_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:Trevor.PortfolioRequest.account_id)
  return account_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.PortfolioRequest.account_id)
}
inline std::string* PortfolioRequest::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.PortfolioRequest.account_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortfolioRequest::unsafe_arena_set_allocated_account_id(
    std::string* account_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.PortfolioRequest.account_id)
}

// string requester_uid = 2;
inline void PortfolioRequest::clear_requester_uid() {
  requester_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioRequest::requester_uid() const {
  // @@protoc_insertion_point(field_get:Trevor.PortfolioRequest.requester_uid)
  return _internal_requester_uid();
}
inline void PortfolioRequest::set_requester_uid(const std::string& value) {
  _internal_set_requester_uid(value);
  // @@protoc_insertion_point(field_set:Trevor.PortfolioRequest.requester_uid)
}
inline std::string* PortfolioRequest::mutable_requester_uid() {
  // @@protoc_insertion_point(field_mutable:Trevor.PortfolioRequest.requester_uid)
  return _internal_mutable_requester_uid();
}
inline const std::string& PortfolioRequest::_internal_requester_uid() const {
  return requester_uid_.Get();
}
inline void PortfolioRequest::_internal_set_requester_uid(const std::string& value) {
  
  requester_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioRequest::set_requester_uid(std::string&& value) {
  
  requester_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.PortfolioRequest.requester_uid)
}
inline void PortfolioRequest::set_requester_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requester_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.PortfolioRequest.requester_uid)
}
inline void PortfolioRequest::set_requester_uid(const char* value,
    size_t size) {
  
  requester_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.PortfolioRequest.requester_uid)
}
inline std::string* PortfolioRequest::_internal_mutable_requester_uid() {
  
  return requester_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioRequest::release_requester_uid() {
  // @@protoc_insertion_point(field_release:Trevor.PortfolioRequest.requester_uid)
  return requester_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioRequest::set_allocated_requester_uid(std::string* requester_uid) {
  if (requester_uid != nullptr) {
    
  } else {
    
  }
  requester_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requester_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.PortfolioRequest.requester_uid)
}
inline std::string* PortfolioRequest::unsafe_arena_release_requester_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.PortfolioRequest.requester_uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return requester_uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortfolioRequest::unsafe_arena_set_allocated_requester_uid(
    std::string* requester_uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (requester_uid != nullptr) {
    
  } else {
    
  }
  requester_uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      requester_uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.PortfolioRequest.requester_uid)
}

// repeated string symbols = 3;
inline int PortfolioRequest::_internal_symbols_size() const {
  return symbols_.size();
}
inline int PortfolioRequest::symbols_size() const {
  return _internal_symbols_size();
}
inline void PortfolioRequest::clear_symbols() {
  symbols_.Clear();
}
inline std::string* PortfolioRequest::add_symbols() {
  // @@protoc_insertion_point(field_add_mutable:Trevor.PortfolioRequest.symbols)
  return _internal_add_symbols();
}
inline const std::string& PortfolioRequest::_internal_symbols(int index) const {
  return symbols_.Get(index);
}
inline const std::string& PortfolioRequest::symbols(int index) const {
  // @@protoc_insertion_point(field_get:Trevor.PortfolioRequest.symbols)
  return _internal_symbols(index);
}
inline std::string* PortfolioRequest::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:Trevor.PortfolioRequest.symbols)
  return symbols_.Mutable(index);
}
inline void PortfolioRequest::set_symbols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Trevor.PortfolioRequest.symbols)
  symbols_.Mutable(index)->assign(value);
}
inline void PortfolioRequest::set_symbols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Trevor.PortfolioRequest.symbols)
  symbols_.Mutable(index)->assign(std::move(value));
}
inline void PortfolioRequest::set_symbols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  symbols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Trevor.PortfolioRequest.symbols)
}
inline void PortfolioRequest::set_symbols(int index, const char* value, size_t size) {
  symbols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Trevor.PortfolioRequest.symbols)
}
inline std::string* PortfolioRequest::_internal_add_symbols() {
  return symbols_.Add();
}
inline void PortfolioRequest::add_symbols(const std::string& value) {
  symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Trevor.PortfolioRequest.symbols)
}
inline void PortfolioRequest::add_symbols(std::string&& value) {
  symbols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Trevor.PortfolioRequest.symbols)
}
inline void PortfolioRequest::add_symbols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Trevor.PortfolioRequest.symbols)
}
inline void PortfolioRequest::add_symbols(const char* value, size_t size) {
  symbols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Trevor.PortfolioRequest.symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PortfolioRequest::symbols() const {
  // @@protoc_insertion_point(field_list:Trevor.PortfolioRequest.symbols)
  return symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PortfolioRequest::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:Trevor.PortfolioRequest.symbols)
  return &symbols_;
}

// -------------------------------------------------------------------

// PortfolioResponse

// string account_id = 1;
inline void PortfolioResponse::clear_account_id() {
  account_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioResponse::account_id() const {
  // @@protoc_insertion_point(field_get:Trevor.PortfolioResponse.account_id)
  return _internal_account_id();
}
inline void PortfolioResponse::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:Trevor.PortfolioResponse.account_id)
}
inline std::string* PortfolioResponse::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:Trevor.PortfolioResponse.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& PortfolioResponse::_internal_account_id() const {
  return account_id_.Get();
}
inline void PortfolioResponse::_internal_set_account_id(const std::string& value) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioResponse::set_account_id(std::string&& value) {
  
  account_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.PortfolioResponse.account_id)
}
inline void PortfolioResponse::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.PortfolioResponse.account_id)
}
inline void PortfolioResponse::set_account_id(const char* value,
    size_t size) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.PortfolioResponse.account_id)
}
inline std::string* PortfolioResponse::_internal_mutable_account_id() {
  
  return account_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioResponse::release_account_id() {
  // @@protoc_insertion_point(field_release:Trevor.PortfolioResponse.account_id)
  return account_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioResponse::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.PortfolioResponse.account_id)
}
inline std::string* PortfolioResponse::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.PortfolioResponse.account_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortfolioResponse::unsafe_arena_set_allocated_account_id(
    std::string* account_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.PortfolioResponse.account_id)
}

// double total_value = 2;
inline void PortfolioResponse::clear_total_value() {
  total_value_ = 0;
}
inline double PortfolioResponse::_internal_total_value() const {
  return total_value_;
}
inline double PortfolioResponse::total_value() const {
  // @@protoc_insertion_point(field_get:Trevor.PortfolioResponse.total_value)
  return _internal_total_value();
}
inline void PortfolioResponse::_internal_set_total_value(double value) {
  
  total_value_ = value;
}
inline void PortfolioResponse::set_total_value(double value) {
  _internal_set_total_value(value);
  // @@protoc_insertion_point(field_set:Trevor.PortfolioResponse.total_value)
}

// double cash_balance = 3;
inline void PortfolioResponse::clear_cash_balance() {
  cash_balance_ = 0;
}
inline double PortfolioResponse::_internal_cash_balance() const {
  return cash_balance_;
}
inline double PortfolioResponse::cash_balance() const {
  // @@protoc_insertion_point(field_get:Trevor.PortfolioResponse.cash_balance)
  return _internal_cash_balance();
}
inline void PortfolioResponse::_internal_set_cash_balance(double value) {
  
  cash_balance_ = value;
}
inline void PortfolioResponse::set_cash_balance(double value) {
  _internal_set_cash_balance(value);
  // @@protoc_insertion_point(field_set:Trevor.PortfolioResponse.cash_balance)
}

// string status = 4;
inline void PortfolioResponse::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioResponse::status() const {
  // @@protoc_insertion_point(field_get:Trevor.PortfolioResponse.status)
  return _internal_status();
}
inline void PortfolioResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Trevor.PortfolioResponse.status)
}
inline std::string* PortfolioResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:Trevor.PortfolioResponse.status)
  return _internal_mutable_status();
}
inline const std::string& PortfolioResponse::_internal_status() const {
  return status_.Get();
}
inline void PortfolioResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioResponse::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.PortfolioResponse.status)
}
inline void PortfolioResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.PortfolioResponse.status)
}
inline void PortfolioResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.PortfolioResponse.status)
}
inline std::string* PortfolioResponse::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioResponse::release_status() {
  // @@protoc_insertion_point(field_release:Trevor.PortfolioResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.PortfolioResponse.status)
}
inline std::string* PortfolioResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.PortfolioResponse.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortfolioResponse::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.PortfolioResponse.status)
}

// repeated .Trevor.Position positions = 5;
inline int PortfolioResponse::_internal_positions_size() const {
  return positions_.size();
}
inline int PortfolioResponse::positions_size() const {
  return _internal_positions_size();
}
inline void PortfolioResponse::clear_positions() {
  positions_.Clear();
}
inline ::Trevor::Position* PortfolioResponse::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:Trevor.PortfolioResponse.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trevor::Position >*
PortfolioResponse::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:Trevor.PortfolioResponse.positions)
  return &positions_;
}
inline const ::Trevor::Position& PortfolioResponse::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::Trevor::Position& PortfolioResponse::positions(int index) const {
  // @@protoc_insertion_point(field_get:Trevor.PortfolioResponse.positions)
  return _internal_positions(index);
}
inline ::Trevor::Position* PortfolioResponse::_internal_add_positions() {
  return positions_.Add();
}
inline ::Trevor::Position* PortfolioResponse::add_positions() {
  // @@protoc_insertion_point(field_add:Trevor.PortfolioResponse.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trevor::Position >&
PortfolioResponse::positions() const {
  // @@protoc_insertion_point(field_list:Trevor.PortfolioResponse.positions)
  return positions_;
}

// -------------------------------------------------------------------

// Position

// string symbol = 1;
inline void Position::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Position::symbol() const {
  // @@protoc_insertion_point(field_get:Trevor.Position.symbol)
  return _internal_symbol();
}
inline void Position::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Trevor.Position.symbol)
}
inline std::string* Position::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Trevor.Position.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Position::_internal_symbol() const {
  return symbol_.Get();
}
inline void Position::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Position::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.Position.symbol)
}
inline void Position::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.Position.symbol)
}
inline void Position::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.Position.symbol)
}
inline std::string* Position::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Position::release_symbol() {
  // @@protoc_insertion_point(field_release:Trevor.Position.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Position::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.Position.symbol)
}
inline std::string* Position::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.Position.symbol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return symbol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Position::unsafe_arena_set_allocated_symbol(
    std::string* symbol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.Position.symbol)
}

// double quantity = 2;
inline void Position::clear_quantity() {
  quantity_ = 0;
}
inline double Position::_internal_quantity() const {
  return quantity_;
}
inline double Position::quantity() const {
  // @@protoc_insertion_point(field_get:Trevor.Position.quantity)
  return _internal_quantity();
}
inline void Position::_internal_set_quantity(double value) {
  
  quantity_ = value;
}
inline void Position::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:Trevor.Position.quantity)
}

// double average_cost = 3;
inline void Position::clear_average_cost() {
  average_cost_ = 0;
}
inline double Position::_internal_average_cost() const {
  return average_cost_;
}
inline double Position::average_cost() const {
  // @@protoc_insertion_point(field_get:Trevor.Position.average_cost)
  return _internal_average_cost();
}
inline void Position::_internal_set_average_cost(double value) {
  
  average_cost_ = value;
}
inline void Position::set_average_cost(double value) {
  _internal_set_average_cost(value);
  // @@protoc_insertion_point(field_set:Trevor.Position.average_cost)
}

// double current_price = 4;
inline void Position::clear_current_price() {
  current_price_ = 0;
}
inline double Position::_internal_current_price() const {
  return current_price_;
}
inline double Position::current_price() const {
  // @@protoc_insertion_point(field_get:Trevor.Position.current_price)
  return _internal_current_price();
}
inline void Position::_internal_set_current_price(double value) {
  
  current_price_ = value;
}
inline void Position::set_current_price(double value) {
  _internal_set_current_price(value);
  // @@protoc_insertion_point(field_set:Trevor.Position.current_price)
}

// double market_value = 5;
inline void Position::clear_market_value() {
  market_value_ = 0;
}
inline double Position::_internal_market_value() const {
  return market_value_;
}
inline double Position::market_value() const {
  // @@protoc_insertion_point(field_get:Trevor.Position.market_value)
  return _internal_market_value();
}
inline void Position::_internal_set_market_value(double value) {
  
  market_value_ = value;
}
inline void Position::set_market_value(double value) {
  _internal_set_market_value(value);
  // @@protoc_insertion_point(field_set:Trevor.Position.market_value)
}

// double unrealized_pnl = 6;
inline void Position::clear_unrealized_pnl() {
  unrealized_pnl_ = 0;
}
inline double Position::_internal_unrealized_pnl() const {
  return unrealized_pnl_;
}
inline double Position::unrealized_pnl() const {
  // @@protoc_insertion_point(field_get:Trevor.Position.unrealized_pnl)
  return _internal_unrealized_pnl();
}
inline void Position::_internal_set_unrealized_pnl(double value) {
  
  unrealized_pnl_ = value;
}
inline void Position::set_unrealized_pnl(double value) {
  _internal_set_unrealized_pnl(value);
  // @@protoc_insertion_point(field_set:Trevor.Position.unrealized_pnl)
}

// -------------------------------------------------------------------

// MarketDataUpdate

// string symbol = 1;
inline void MarketDataUpdate::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataUpdate::symbol() const {
  // @@protoc_insertion_point(field_get:Trevor.MarketDataUpdate.symbol)
  return _internal_symbol();
}
inline void MarketDataUpdate::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Trevor.MarketDataUpdate.symbol)
}
inline std::string* MarketDataUpdate::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Trevor.MarketDataUpdate.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& MarketDataUpdate::_internal_symbol() const {
  return symbol_.Get();
}
inline void MarketDataUpdate::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataUpdate::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.MarketDataUpdate.symbol)
}
inline void MarketDataUpdate::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.MarketDataUpdate.symbol)
}
inline void MarketDataUpdate::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.MarketDataUpdate.symbol)
}
inline std::string* MarketDataUpdate::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataUpdate::release_symbol() {
  // @@protoc_insertion_point(field_release:Trevor.MarketDataUpdate.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataUpdate::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.MarketDataUpdate.symbol)
}
inline std::string* MarketDataUpdate::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.MarketDataUpdate.symbol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return symbol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataUpdate::unsafe_arena_set_allocated_symbol(
    std::string* symbol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.MarketDataUpdate.symbol)
}

// double price = 2;
inline void MarketDataUpdate::clear_price() {
  price_ = 0;
}
inline double MarketDataUpdate::_internal_price() const {
  return price_;
}
inline double MarketDataUpdate::price() const {
  // @@protoc_insertion_point(field_get:Trevor.MarketDataUpdate.price)
  return _internal_price();
}
inline void MarketDataUpdate::_internal_set_price(double value) {
  
  price_ = value;
}
inline void MarketDataUpdate::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Trevor.MarketDataUpdate.price)
}

// int64 volume = 3;
inline void MarketDataUpdate::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketDataUpdate::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketDataUpdate::volume() const {
  // @@protoc_insertion_point(field_get:Trevor.MarketDataUpdate.volume)
  return _internal_volume();
}
inline void MarketDataUpdate::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volume_ = value;
}
inline void MarketDataUpdate::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Trevor.MarketDataUpdate.volume)
}

// int64 timestamp = 4;
inline void MarketDataUpdate::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketDataUpdate::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketDataUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:Trevor.MarketDataUpdate.timestamp)
  return _internal_timestamp();
}
inline void MarketDataUpdate::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void MarketDataUpdate::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Trevor.MarketDataUpdate.timestamp)
}

// string exchange = 5;
inline void MarketDataUpdate::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataUpdate::exchange() const {
  // @@protoc_insertion_point(field_get:Trevor.MarketDataUpdate.exchange)
  return _internal_exchange();
}
inline void MarketDataUpdate::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Trevor.MarketDataUpdate.exchange)
}
inline std::string* MarketDataUpdate::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Trevor.MarketDataUpdate.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& MarketDataUpdate::_internal_exchange() const {
  return exchange_.Get();
}
inline void MarketDataUpdate::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataUpdate::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.MarketDataUpdate.exchange)
}
inline void MarketDataUpdate::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.MarketDataUpdate.exchange)
}
inline void MarketDataUpdate::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.MarketDataUpdate.exchange)
}
inline std::string* MarketDataUpdate::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataUpdate::release_exchange() {
  // @@protoc_insertion_point(field_release:Trevor.MarketDataUpdate.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataUpdate::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.MarketDataUpdate.exchange)
}
inline std::string* MarketDataUpdate::unsafe_arena_release_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.MarketDataUpdate.exchange)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataUpdate::unsafe_arena_set_allocated_exchange(
    std::string* exchange) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.MarketDataUpdate.exchange)
}

// -------------------------------------------------------------------

// TradeRequest

// string account_id = 1;
inline void TradeRequest::clear_account_id() {
  account_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeRequest::account_id() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeRequest.account_id)
  return _internal_account_id();
}
inline void TradeRequest::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeRequest.account_id)
}
inline std::string* TradeRequest::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:Trevor.TradeRequest.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& TradeRequest::_internal_account_id() const {
  return account_id_.Get();
}
inline void TradeRequest::_internal_set_account_id(const std::string& value) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeRequest::set_account_id(std::string&& value) {
  
  account_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.TradeRequest.account_id)
}
inline void TradeRequest::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.TradeRequest.account_id)
}
inline void TradeRequest::set_account_id(const char* value,
    size_t size) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.TradeRequest.account_id)
}
inline std::string* TradeRequest::_internal_mutable_account_id() {
  
  return account_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:Trevor.TradeRequest.account_id)
  return account_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.TradeRequest.account_id)
}
inline std::string* TradeRequest::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.TradeRequest.account_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeRequest::unsafe_arena_set_allocated_account_id(
    std::string* account_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.TradeRequest.account_id)
}

// string symbol = 2;
inline void TradeRequest::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeRequest::symbol() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeRequest.symbol)
  return _internal_symbol();
}
inline void TradeRequest::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeRequest.symbol)
}
inline std::string* TradeRequest::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Trevor.TradeRequest.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeRequest::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeRequest::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeRequest::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.TradeRequest.symbol)
}
inline void TradeRequest::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.TradeRequest.symbol)
}
inline void TradeRequest::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.TradeRequest.symbol)
}
inline std::string* TradeRequest::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeRequest::release_symbol() {
  // @@protoc_insertion_point(field_release:Trevor.TradeRequest.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeRequest::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.TradeRequest.symbol)
}
inline std::string* TradeRequest::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.TradeRequest.symbol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return symbol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeRequest::unsafe_arena_set_allocated_symbol(
    std::string* symbol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.TradeRequest.symbol)
}

// string side = 3;
inline void TradeRequest::clear_side() {
  side_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeRequest::side() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeRequest.side)
  return _internal_side();
}
inline void TradeRequest::set_side(const std::string& value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeRequest.side)
}
inline std::string* TradeRequest::mutable_side() {
  // @@protoc_insertion_point(field_mutable:Trevor.TradeRequest.side)
  return _internal_mutable_side();
}
inline const std::string& TradeRequest::_internal_side() const {
  return side_.Get();
}
inline void TradeRequest::_internal_set_side(const std::string& value) {
  
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeRequest::set_side(std::string&& value) {
  
  side_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.TradeRequest.side)
}
inline void TradeRequest::set_side(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.TradeRequest.side)
}
inline void TradeRequest::set_side(const char* value,
    size_t size) {
  
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.TradeRequest.side)
}
inline std::string* TradeRequest::_internal_mutable_side() {
  
  return side_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeRequest::release_side() {
  // @@protoc_insertion_point(field_release:Trevor.TradeRequest.side)
  return side_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeRequest::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    
  } else {
    
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.TradeRequest.side)
}
inline std::string* TradeRequest::unsafe_arena_release_side() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.TradeRequest.side)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return side_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeRequest::unsafe_arena_set_allocated_side(
    std::string* side) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (side != nullptr) {
    
  } else {
    
  }
  side_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      side, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.TradeRequest.side)
}

// double quantity = 4;
inline void TradeRequest::clear_quantity() {
  quantity_ = 0;
}
inline double TradeRequest::_internal_quantity() const {
  return quantity_;
}
inline double TradeRequest::quantity() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeRequest.quantity)
  return _internal_quantity();
}
inline void TradeRequest::_internal_set_quantity(double value) {
  
  quantity_ = value;
}
inline void TradeRequest::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeRequest.quantity)
}

// string order_type = 5;
inline void TradeRequest::clear_order_type() {
  order_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeRequest::order_type() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeRequest.order_type)
  return _internal_order_type();
}
inline void TradeRequest::set_order_type(const std::string& value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeRequest.order_type)
}
inline std::string* TradeRequest::mutable_order_type() {
  // @@protoc_insertion_point(field_mutable:Trevor.TradeRequest.order_type)
  return _internal_mutable_order_type();
}
inline const std::string& TradeRequest::_internal_order_type() const {
  return order_type_.Get();
}
inline void TradeRequest::_internal_set_order_type(const std::string& value) {
  
  order_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeRequest::set_order_type(std::string&& value) {
  
  order_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.TradeRequest.order_type)
}
inline void TradeRequest::set_order_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.TradeRequest.order_type)
}
inline void TradeRequest::set_order_type(const char* value,
    size_t size) {
  
  order_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.TradeRequest.order_type)
}
inline std::string* TradeRequest::_internal_mutable_order_type() {
  
  return order_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeRequest::release_order_type() {
  // @@protoc_insertion_point(field_release:Trevor.TradeRequest.order_type)
  return order_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeRequest::set_allocated_order_type(std::string* order_type) {
  if (order_type != nullptr) {
    
  } else {
    
  }
  order_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.TradeRequest.order_type)
}
inline std::string* TradeRequest::unsafe_arena_release_order_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.TradeRequest.order_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return order_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeRequest::unsafe_arena_set_allocated_order_type(
    std::string* order_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (order_type != nullptr) {
    
  } else {
    
  }
  order_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      order_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.TradeRequest.order_type)
}

// double price = 6;
inline void TradeRequest::clear_price() {
  price_ = 0;
}
inline double TradeRequest::_internal_price() const {
  return price_;
}
inline double TradeRequest::price() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeRequest.price)
  return _internal_price();
}
inline void TradeRequest::_internal_set_price(double value) {
  
  price_ = value;
}
inline void TradeRequest::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeRequest.price)
}

// string requester_uid = 7;
inline void TradeRequest::clear_requester_uid() {
  requester_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeRequest::requester_uid() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeRequest.requester_uid)
  return _internal_requester_uid();
}
inline void TradeRequest::set_requester_uid(const std::string& value) {
  _internal_set_requester_uid(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeRequest.requester_uid)
}
inline std::string* TradeRequest::mutable_requester_uid() {
  // @@protoc_insertion_point(field_mutable:Trevor.TradeRequest.requester_uid)
  return _internal_mutable_requester_uid();
}
inline const std::string& TradeRequest::_internal_requester_uid() const {
  return requester_uid_.Get();
}
inline void TradeRequest::_internal_set_requester_uid(const std::string& value) {
  
  requester_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeRequest::set_requester_uid(std::string&& value) {
  
  requester_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.TradeRequest.requester_uid)
}
inline void TradeRequest::set_requester_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requester_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.TradeRequest.requester_uid)
}
inline void TradeRequest::set_requester_uid(const char* value,
    size_t size) {
  
  requester_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.TradeRequest.requester_uid)
}
inline std::string* TradeRequest::_internal_mutable_requester_uid() {
  
  return requester_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeRequest::release_requester_uid() {
  // @@protoc_insertion_point(field_release:Trevor.TradeRequest.requester_uid)
  return requester_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeRequest::set_allocated_requester_uid(std::string* requester_uid) {
  if (requester_uid != nullptr) {
    
  } else {
    
  }
  requester_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requester_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.TradeRequest.requester_uid)
}
inline std::string* TradeRequest::unsafe_arena_release_requester_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.TradeRequest.requester_uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return requester_uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeRequest::unsafe_arena_set_allocated_requester_uid(
    std::string* requester_uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (requester_uid != nullptr) {
    
  } else {
    
  }
  requester_uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      requester_uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.TradeRequest.requester_uid)
}

// -------------------------------------------------------------------

// TradeResponse

// string account_id = 1;
inline void TradeResponse::clear_account_id() {
  account_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeResponse::account_id() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeResponse.account_id)
  return _internal_account_id();
}
inline void TradeResponse::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeResponse.account_id)
}
inline std::string* TradeResponse::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:Trevor.TradeResponse.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& TradeResponse::_internal_account_id() const {
  return account_id_.Get();
}
inline void TradeResponse::_internal_set_account_id(const std::string& value) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeResponse::set_account_id(std::string&& value) {
  
  account_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.TradeResponse.account_id)
}
inline void TradeResponse::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.TradeResponse.account_id)
}
inline void TradeResponse::set_account_id(const char* value,
    size_t size) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.TradeResponse.account_id)
}
inline std::string* TradeResponse::_internal_mutable_account_id() {
  
  return account_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeResponse::release_account_id() {
  // @@protoc_insertion_point(field_release:Trevor.TradeResponse.account_id)
  return account_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeResponse::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.TradeResponse.account_id)
}
inline std::string* TradeResponse::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.TradeResponse.account_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeResponse::unsafe_arena_set_allocated_account_id(
    std::string* account_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.TradeResponse.account_id)
}

// string order_id = 2;
inline void TradeResponse::clear_order_id() {
  order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeResponse::order_id() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeResponse.order_id)
  return _internal_order_id();
}
inline void TradeResponse::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeResponse.order_id)
}
inline std::string* TradeResponse::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:Trevor.TradeResponse.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& TradeResponse::_internal_order_id() const {
  return order_id_.Get();
}
inline void TradeResponse::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeResponse::set_order_id(std::string&& value) {
  
  order_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.TradeResponse.order_id)
}
inline void TradeResponse::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.TradeResponse.order_id)
}
inline void TradeResponse::set_order_id(const char* value,
    size_t size) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.TradeResponse.order_id)
}
inline std::string* TradeResponse::_internal_mutable_order_id() {
  
  return order_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeResponse::release_order_id() {
  // @@protoc_insertion_point(field_release:Trevor.TradeResponse.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeResponse::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.TradeResponse.order_id)
}
inline std::string* TradeResponse::unsafe_arena_release_order_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.TradeResponse.order_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return order_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeResponse::unsafe_arena_set_allocated_order_id(
    std::string* order_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      order_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.TradeResponse.order_id)
}

// string status = 3;
inline void TradeResponse::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeResponse::status() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeResponse.status)
  return _internal_status();
}
inline void TradeResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeResponse.status)
}
inline std::string* TradeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:Trevor.TradeResponse.status)
  return _internal_mutable_status();
}
inline const std::string& TradeResponse::_internal_status() const {
  return status_.Get();
}
inline void TradeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeResponse::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.TradeResponse.status)
}
inline void TradeResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.TradeResponse.status)
}
inline void TradeResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.TradeResponse.status)
}
inline std::string* TradeResponse::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeResponse::release_status() {
  // @@protoc_insertion_point(field_release:Trevor.TradeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.TradeResponse.status)
}
inline std::string* TradeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.TradeResponse.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeResponse::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.TradeResponse.status)
}

// double filled_quantity = 4;
inline void TradeResponse::clear_filled_quantity() {
  filled_quantity_ = 0;
}
inline double TradeResponse::_internal_filled_quantity() const {
  return filled_quantity_;
}
inline double TradeResponse::filled_quantity() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeResponse.filled_quantity)
  return _internal_filled_quantity();
}
inline void TradeResponse::_internal_set_filled_quantity(double value) {
  
  filled_quantity_ = value;
}
inline void TradeResponse::set_filled_quantity(double value) {
  _internal_set_filled_quantity(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeResponse.filled_quantity)
}

// double average_fill_price = 5;
inline void TradeResponse::clear_average_fill_price() {
  average_fill_price_ = 0;
}
inline double TradeResponse::_internal_average_fill_price() const {
  return average_fill_price_;
}
inline double TradeResponse::average_fill_price() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeResponse.average_fill_price)
  return _internal_average_fill_price();
}
inline void TradeResponse::_internal_set_average_fill_price(double value) {
  
  average_fill_price_ = value;
}
inline void TradeResponse::set_average_fill_price(double value) {
  _internal_set_average_fill_price(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeResponse.average_fill_price)
}

// string reason = 6;
inline void TradeResponse::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeResponse::reason() const {
  // @@protoc_insertion_point(field_get:Trevor.TradeResponse.reason)
  return _internal_reason();
}
inline void TradeResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:Trevor.TradeResponse.reason)
}
inline std::string* TradeResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:Trevor.TradeResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& TradeResponse::_internal_reason() const {
  return reason_.Get();
}
inline void TradeResponse::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeResponse::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trevor.TradeResponse.reason)
}
inline void TradeResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trevor.TradeResponse.reason)
}
inline void TradeResponse::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trevor.TradeResponse.reason)
}
inline std::string* TradeResponse::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeResponse::release_reason() {
  // @@protoc_insertion_point(field_release:Trevor.TradeResponse.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trevor.TradeResponse.reason)
}
inline std::string* TradeResponse::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trevor.TradeResponse.reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeResponse::unsafe_arena_set_allocated_reason(
    std::string* reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trevor.TradeResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Trevor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
